Object Prototype

In the browser's console, try creating an object literal:

const myObject = {
  city: "Madrid",
  greet() {
    console.log(`Greetings from ${this.city}`);
  },
};

myObject.greet(); // Greetings from Madrid

This is an object with one data property, city, and one method, greet(). If you type the object's name followed by a period into the console, like myObject., then the console will pop up a list of all the properties available to this object
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
__proto__
toLocaleString
toString
valueOf
city
constructor
greet....

Every object in JavaScript has a built-in property, which is called its prototype. The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain. The chain ends when we reach a prototype that has null for its own prototype.

Note: The property of an object that points to its prototype is not called prototype. Its name is not standard, but in practice all browsers use __proto__. The standard way to access an object's prototype is the Object.getPrototypeOf() method.

So when we call myObject.toString(), the browser:

looks for toString in myObject
can't find it there, so looks in the prototype object of myObject for toString
finds it there, and calls it.

What is the prototype for myObject? To find out, we can use the function Object.getPrototypeOf():

Object.getPrototypeOf(myObject); // Object { }

This is an object called Object.prototype, and it is the most basic prototype, that all objects have by default. The prototype of Object.prototype is null, so it's at the end of the prototype chain


The prototype of an object is not always Object.prototype. Try this:

const myDate = new Date();
let object = myDate;

do {
  object = Object.getPrototypeOf(object);
  console.log(object);
} while (object);

// Date.prototype
// Object { }
// null

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Shadowing properties
What happens if you define a property in an object, when a property with the same name is defined in the object's prototype? Let's see:

const myDate = new Date(1995, 11, 17);

console.log(myDate.getYear()); // 95

myDate.getYear = function () {
  console.log("something else!");
};

myDate.getYear(); // 'something else!'
 
This should be predictable, given the description of the prototype chain. When we call getYear() the browser first looks in myDate for a property with that name, and only checks the prototype if myDate does not define it. So when we add getYear() to myDate, then the version in myDate is called.

This is called "shadowing" the property.

Setting a prototype-

There are various ways of setting an object's prototype in JavaScript, and here we'll describe two: Object.create() and constructors.

Using Object.create
The Object.create() method creates a new object and allows you to specify an object that will be used as the new object's prototype.


const personPrototype = {
  greet() {
    console.log("hello!");
  },
};

const carl = Object.create(personPrototype);
carl.greet(); // hello!


Here we create an object personPrototype, which has a greet() method. We then use Object.create() to create a new object with personPrototype as its prototype. Now we can call greet() on the new object, and the prototype provides its implementation.

One more Example - 
// Create a prototype object
const animal = {
  makeSound() {
    console.log("The animal makes a sound.");
  }
};

// Create a new object with 'animal' as its prototype
const dog = Object.create(animal);

// Add additional properties to 'dog'
dog.breed = "Labrador";
dog.bark = function() {
  console.log("The dog barks.");
};

// Access properties from 'dog' and its prototype 'animal'
console.log(dog.breed); // Output: "Labrador"
dog.makeSound(); // Output: "The animal makes a sound."
dog.bark(); // Output: "The dog barks."
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using a constructor
In JavaScript, all functions have a property named prototype. When you call a function as a constructor, this property is set as the prototype of the newly constructed object  

So if we set the prototype of a constructor, we can ensure that all objects created with that constructor are given that prototype:

const personPrototype = {
  greet() {
    console.log(`hello, my name is ${this.name}!`);
  },
};

function Person(name) {
  this.name = name;
}

Object.assign(Person.prototype, personPrototype);
// or
// Person.prototype.greet = personPrototype.greet;

One more Example - 
// Define a constructor function
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

// Add a method to the prototype of Person
Person.prototype.sayHello = function() {
  console.log(`Hello, my name is ${this.firstName} ${this.lastName}.`);
};

// Create objects using the Person constructor
const john = new Person("John", "Doe");
const jane = new Person("Jane", "Smith");

// Access properties and methods from objects created with Person constructor
console.log(john.firstName); // Output: "John"
console.log(jane.lastName); // Output: "Smith"
john.sayHello(); // Output: "Hello, my name is John Doe."





Properties that are defined directly in the object, like name here, are called own properties, and you can check whether a property is an own property using the static Object.hasOwn() method:

const irma = new Person("Irma");

console.log(Object.hasOwn(irma, "name")); // true
console.log(Object.hasOwn(irma, "greet")); // false


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

So basically we have achieved prototypal inheritance
using Object.create() and constructor function


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Akshya Saini  , Prototype and Prototypal Inheritance

So when you create a obj and do obj.  you 
get access to lot of properties becz of prototype obj

similar things happens when you create any function

function fun(){}  or arr
 
fun.   you get access to lot of things
like call, apply , bind , length, name


and similar with array 
like  arr.  



arr.__proto__ === Array.prototype
fun.__proto__ === Function.prototype
obj.__proto__ === Object.prototype




Array.__proto__.__proto__ === Object.prototype
Object.prototype__proto__ == it is null

obj.prototype
undefined

arr.prototype
undefined

fun.prototype
{constructor: Æ’}

So everything in js in eventually an object becz
of this Prototype chain.


########################
Function.prototype.mybind = function(){
	console.log('hello');
}

function fun(){

}

so now we know we can do, fun.mybind()
becz all the properties and methods are inherited to fun
from its prototype object

#######################

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Thinking recursively  akshay saini-


how to iterate over object in js

1. for...in loop:

const obj = { key1: "value1", key2: "value2", key3: "value3" };

for (let key in obj) {
  console.log(key); // Outputs: key1, key2, key3
  console.log(obj[key]); // Outputs: value1, value2, value3
}


2. Object.keys() method:

const obj = { key1: "value1", key2: "value2", key3: "value3" };

const keys = Object.keys(obj);
for (let i = 0; i < keys.length; i++) {
  const key = keys[i];
  console.log(key); // Outputs: key1, key2, key3
  console.log(obj[key]); // Outputs: value1, value2, value3
}



3. Object.values() method:

const obj = { key1: "value1", key2: "value2", key3: "value3" };

const values = Object.values(obj);
for (let i = 0; i < values.length; i++) {
  const value = values[i];
  console.log(value); // Outputs: value1, value2, value3
}


4. Object.entries() method:

const obj = { key1: "value1", key2: "value2", key3: "value3" };

const entries = Object.entries(obj);
for (let i = 0; i < entries.length; i++) {
  const [key, value] = entries[i];
  console.log(key); // Outputs: key1, key2, key3
  console.log(value); // Outputs: value1, value2, value3
}



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

let user = {
  name: "Akshaya",
  address: {
    personal: {
      city: "Dheradun",
      area: "Majra",
    },
    office: {
      city: "Hydrabad",
      area: {
        landmark: "Hitech",
      },
    },
  },
  phone: "12345",
};

function magic(obj) {
  let newObj = {};
  Object.entries(obj).forEach((entry) => {
    let [key, val] = entry;
    if (typeof val === "object") {
      let obj1 = magic(val);
      Object.entries(obj1).forEach((entry) => {
        let [k, val] = entry;
        newObj[key + "_" + k] = val;
      });
    } else {
      newObj[key] = val;
    }
  });
  return newObj;
}
console.log(magic(user));



Output-
{
  name: 'Akshaya',
  address_personal_city: 'Dheradun',
  address_personal_area: 'Majra',
  address_office_city: 'Hydrabad',
  address_office_area_landmark: 'Hitech',
  phone: '12345'
}

~~~~~~~~~~~~~~
2nd way

let finalObj = {}
function magic(obj,parent){
    for(let key in obj){
        if(typeof obj[key]==='object'){
            magic(obj[key],parent+'_'+key)
        }else{
            finalObj[parent+'_'+key] = obj[key]
        }
    }
} 

magic(user,"user")
console.log(finalObj)

output-
{
  user_name: 'Akshaya',
  user_address_personal_city: 'Dheradun',
  user_address_personal_area: 'Majra',
  user_address_office_city: 'Hydrabad',
  user_address_office_area_landmark: 'Hitech',
  user_phone: '12345'
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
















